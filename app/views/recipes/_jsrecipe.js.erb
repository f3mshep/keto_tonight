const categoryId = parseInt("<%= @recipe.categories.first.id %>")
const currentUserId = parseInt("<%= current_user.id %>")
let isAdmin = <%= current_user.admin%>
let currentRecipeId = parseInt("<%= @recipe.id%>")
let allRecipes = {}
let nextId = ""
let previousId = ""

//global functions

function paginateRecipes() {
    let recipeMap = allRecipes.map(recipe => recipe.id)
    let currentIndex = recipeMap.indexOf(currentRecipeId)
    let nextIndex = currentIndex + 1
    let prevIndex = currentIndex - 1
   if (nextIndex >= recipeMap.length){
        nextIndex = nextIndex % recipeMap.length
   }
   if (prevIndex < 0){
       prevIndex = recipeMap.length - 1
   }
   nextId = recipeMap[nextIndex]
   previousId = recipeMap[prevIndex]
}


function nextRecipe(){
    $("#nextRecipe").click(function(event){
        event.preventDefault()
        let currentRecipe = allRecipes.find((recipe) => recipe.id === nextId)
        currentRecipeId = currentRecipe.id
        let recipeObject = new Recipe(currentRecipe)
        paginateRecipes()
        recipeObject.buildRecipe()
    })
}

function previousRecipe(){
    $("#prevRecipe").click(function(event){
        event.preventDefault()
        let currentRecipe = allRecipes.find((recipe) => recipe.id === previousId)
        currentRecipeId = currentRecipe.id
        new Recipe(currentRecipe)
        paginateRecipes()
        recipeObject.buildRecipe()
    })
}

function loadRecipes() {
    $.get("/categories/" + categoryId + ".json", function(data){
        allRecipes = data
        paginateRecipes()
    })
}


//ingredients

class IngredientCollection{
    constructor(recipe){
        this.recipe = recipe

    }

    ingredientName(recipeIngredient){
        let target = recipeIngredient.ingredient_id
        let food = this.recipe.ingredients.find((ingredient) => ingredient.id === target)
        return food.name
    }

    buildIngredients(){

    }

}


function loadIngredients(){
    let recipeIngredients = thisRecipe.recipe_ingredients
    for (const recipeIngredient of recipeIngredients) {
        let lineItem = document.createElement("li")
        lineItem.innerHTML = `${Math.ceil(recipeIngredient.quantity)} ${recipeIngredient.measure} ${ingredientName(recipeIngredient)}`
        document.getElementById("recipeIngredients").appendChild(lineItem)
    }
    document.getElementById("recipeIngredients").prepend(document.createElement("br"))
}

//categories

function loadCategories(){
    let categories = thisRecipe.categories.map((category)=>category.name)
    if(categories.length === 1){
        categories = categories[0]
    }
    else if(categories.length === 2){
        categories = categories[0] + " and " + categories[1]
    }
    else if(categories.length > 2){
        categories[categories.length - 1] = "and " + categories[categories.length - 1]
        categories = categories.join(", ")
    }
    document.getElementById("recipeCategories").innerHTML = "<br>" + categories
}

//comments

function commentActions(commentHolder, comment){
    if(isAdmin || comment.user_id === currentUserId){
        debugger
        commentHolder.getElementsByTagName("button")[0].id = comment.id
        commentHolder.getElementsByTagName("form")[0].action = "/comments/" + comment.id
    }
    else{ 
        commentHolder.getElementsByTagName("button")[0].remove()
        commentHolder.getElementsByTagName("form")[0].remove()
    }
}

function loadComments(){
    document.getElementById("new_comment").action = "/recipes/" + currentRecipeId + "/comments"
    let comments = thisRecipe.comments
    for (const comment of comments) {
        var commentHolder = document.createElement("div")
        commentHolder.id = "comment-" + comment.id
        commentHolder.innerHTML = "<%= j (render(@comment)) %>"
        commentHolder.getElementsByTagName("p")[0].innerHTML = comment.content
        commentHolder.getElementsByTagName("p")[1].innerHTML = "-" + comment.username
        commentActions(commentHolder, comment)
        document.getElementById("commentsBox").prepend(commentHolder)
    }
    addDeleteListener()
    addEditListener()
}



//takes in JSON response, creates object

class Recipe{
    constructor(recipe){
        this.title = recipe.title
        this.description = recipe.description.replace(new RegExp('\r?\n', 'g'), '<br />')
        this.image = recipe.image
        this.servings = recipe.servings
        this.caloriesPer = parseInt(recipe.calories / this.servings)
        this.fatPer = parseInt(recipe.fat / this.servings)
        this.proteinPer = parseInt(recipe.protein / this.servings)
        this.carbsPer = parseInt(recipe.carbs / this.servings)
        this.fiberPer = parseInt(recipe.fiber / this.servings)
    }

    loadAdminFunctions(){

    }

    buildRecipe(){
        document.getElementById("recipeTitle").innerHTML = this.title
        document.getElementById("adminFeatures").innerHTML = ""
        document.getElementById("recipePicture").src = this.image
        document.getElementById("recipeServings").innerHTML = "Serves " + this.servings
        document.getElementById("recipeCalories").innerHTML = "<strong>Calories: </strong>" + this.caloriesPer
        document.getElementById("recipeFat").innerHTML = "<strong>Fats: </strong>" + this.fatPer
        document.getElementById("recipeProtein").innerHTML = "<strong>Protein: </strong>" + this.proteinPer
        document.getElementById("recipeCarbs").innerHTML = "<strong>Protein: </strong>" + this.carbsPer
        document.getElementById("recipeFiber").innerHTML = "<strong>Fiber: </strong>" + this.fiberPer
        document.getElementById("recipeDescription").innerHTML = this.description
        document.getElementById("missingCount").innerHTML = ""
        document.getElementById("missingIngredients").innerHTML = ""
        this.loadAdminFunctions()

        let ingredients = new IngredientCollection(this)
        ingredients.buildIngredients

        let comments = new CommentCollection(this)
        comments.buildComments

        let categories = new CategorieCollection(this)
        categories.buildCategories
        // loadCategories()
        // loadComments()
        // loadIngredients()
    }
}

$(function () {
    loadRecipes()
    nextRecipe()
    previousRecipe()
})
