const categoryId = parseInt("<%= @recipe.categories.first.id %>")
const currentUserId = parseInt("<%= current_user.id %>")
let isAdmin = <%= current_user.admin%>
let currentRecipeId = parseInt("<%= @recipe.id%>")
let allRecipes = {}
let nextId = ""
let previousId = ""
let thisRecipe = {}

//global functions

function paginateRecipes() {
    let recipeMap = allRecipes.map(recipe => recipe.id)
    let currentIndex = recipeMap.indexOf(currentRecipeId)
    let nextIndex = currentIndex + 1
    let prevIndex = currentIndex - 1
   if (nextIndex >= recipeMap.length){
        nextIndex = nextIndex % recipeMap.length
   }
   if (prevIndex < 0){
       prevIndex = recipeMap.length - 1
   }
   nextId = recipeMap[nextIndex]
   previousId = recipeMap[prevIndex]
}


function nextRecipe(){
    $("#nextRecipe").click(function(event){
        event.preventDefault()
        loadRecipe(nextId)
    })
}

function previousRecipe(){
    $("#prevRecipe").click(function(event){
        event.preventDefault()
        loadRecipe(previousId)
    })
}

function loadRecipes() {
    $.get("/categories/" + categoryId + ".json", function(data){
        allRecipes = data
        paginateRecipes()
    })
}


//ingredients

function ingredientName(recipeIngredient){
    let target = recipeIngredient.ingredient_id

    let food = thisRecipe.ingredients.find((ingredient) => ingredient.id === target)
    if (food){
        return food.name
    }
}

function loadIngredients(){
    let recipeIngredients = thisRecipe.recipe_ingredients
    for (const recipeIngredient of recipeIngredients) {
        let lineItem = document.createElement("li")
        lineItem.innerHTML = `${Math.ceil(recipeIngredient.quantity)} ${recipeIngredient.measure} ${ingredientName(recipeIngredient)}`
        document.getElementById("recipeIngredients").appendChild(lineItem)
    }
    document.getElementById("recipeIngredients").prepend(document.createElement("br"))
}

//categories

function loadCategories(){
    let categories = thisRecipe.categories.map((category)=>category.name)
    if(categories.length === 1){
        categories = categories[0]
    }
    else if(categories.length === 2){
        categories = categories[0] + " and " + categories[1]
    }
    else if(categories.length > 2){
        categories[categories.length - 1] = "and " + categories[categories.length - 1]
        categories = categories.join(", ")
    }
    document.getElementById("recipeCategories").innerHTML = "<br>" + categories
}

//comments

function commentActions(commentHolder, comment){
    if(isAdmin || comment.user_id === currentUserId){
        debugger
        commentHolder.getElementsByTagName("button")[0].id = comment.id
        commentHolder.getElementsByTagName("form")[0].action = "/comments/" + comment.id
    }
    else{ 
        commentHolder.getElementsByTagName("button")[0].remove()
        commentHolder.getElementsByTagName("form")[0].remove()
    }
}

function loadComments(){
    document.getElementById("new_comment").action = "/recipes/" + currentRecipeId + "/comments"
    let comments = thisRecipe.comments
    for (const comment of comments) {
        var commentHolder = document.createElement("div")
        commentHolder.id = "comment-" + comment.id
        commentHolder.innerHTML = "<%= j (render(@comment)) %>"
        commentHolder.getElementsByTagName("p")[0].innerHTML = comment.content
        commentHolder.getElementsByTagName("p")[1].innerHTML = "-" + comment.username
        commentActions(commentHolder, comment)
        document.getElementById("commentsBox").prepend(commentHolder)
    }
    addDeleteListener()
    addEditListener()
}



//recipe 
function loadRecipe(RecipeId){
    function loadThis(element){
        return element.id === RecipeId
    }
    thisRecipe = allRecipes.find(loadThis)
    currentRecipeId = thisRecipe.id
    paginateRecipes()
    //maybe on a refactor I can make this a hash that is iterated through.
    document.getElementById("recipeTitle").innerHTML = thisRecipe.title
    document.getElementById("adminFeatures").innerHTML = ""
    document.getElementById("recipePicture").src = thisRecipe.image
    document.getElementById("recipeServings").innerHTML = "Serves " + thisRecipe.servings
    document.getElementById("recipeCalories").innerHTML = "<strong>Calories: </strong>" + parseInt(thisRecipe.calories / thisRecipe.servings)
    document.getElementById("recipeFat").innerHTML = "<strong>Fats: </strong>" + parseInt(thisRecipe.fat / thisRecipe.servings)
    document.getElementById("recipeProtein").innerHTML = "<strong>Protein: </strong>" + parseInt(thisRecipe.protein / thisRecipe.servings)
    document.getElementById("recipeCarbs").innerHTML = "<strong>Protein: </strong>" + parseInt(thisRecipe.carbs / thisRecipe.servings)
    document.getElementById("recipeFiber").innerHTML = "<strong>Fiber: </strong>" + parseInt(thisRecipe.fiber / thisRecipe.servings)
    document.getElementById("recipeIngredients").innerHTML = ""
    document.getElementById("recipeDescription").innerHTML = ""
    document.getElementById("recipeDescription").innerHTML = thisRecipe.description.replace(new RegExp('\r?\n', 'g'), '<br />')
    document.getElementById("missingCount").innerHTML = ""
    document.getElementById("missingIngredients").innerHTML = ""
    document.getElementById("commentsBox").innerHTML = ""
    loadCategories()
    loadComments()
    loadIngredients()
    
}


$(function () {
    loadRecipes()
    nextRecipe()
    previousRecipe()
})
