class Comment {
    constructor(argument){
        this.serialized = undefined
        this.postURL = undefined
        this.content = undefined
        this.id = argument.id
        this.selector = argument
    }

    setContent(){
        this.content = this.selector.getElementsByTagName("p").namedItem("commentContent").innerHTML
    }

    setActionURL(){
        this.actionURL = "/comments/" + this.id.replace(/\D*/, "")
    }

    setPostURL(){
        this.postURL = this.selector.action.replace(/https?:\/\/localhost:3000/, "")
    }

    serializeForm(){
        this.serialized = $(this.selector).serialize()
    }

    postComment(){
        this.setPostURL()
        this.serializeForm()
        let postThis = $.post(this.postURL, this.serialized, (data)=>{
            var commentHolder = document.createElement("div")
            commentHolder.id = "comment-" + data.id
            commentHolder.innerHTML = "<%= j (render(@comment)) %>"
            commentHolder.getElementsByTagName("p")[0].innerHTML = data.content
            commentHolder.getElementsByTagName("button")[0].id = data.id
            commentHolder.getElementsByTagName("form")[0].action = "/comments/" + data.id
            document.getElementById("commentsBox").prepend(commentHolder)
            $('#leaveComment').modal('hide')
        })
        postThis.then($.proxy(function (resp) {
            let myId = "comment-" + resp.id
            this.selector = document.getElementById(myId)
            this.id = myId
            const myEdit = this.editComment.bind(this)
            const myDelete = this.deleteComment.bind(this)
            document.getElementById(myId).querySelector(".js-delete").addEventListener("click", function(event){
                event.preventDefault()
                myDelete()
            })
            document.getElementById(myId).querySelector(".js-edit").addEventListener("click", function(event){
                event.preventDefault()
                myEdit()
            })
            const commentForm = document.getElementById("new_comment")
            commentForm.getElementsByTagName("textarea")[0].value = ""
            commentForm.getElementsByTagName("input").namedItem("commit").disabled = false
                }, this))
    }

    deleteComment(){
        this.setActionURL()
        let url = this.actionURL
        $.ajax({
        url: url,
        type: 'DELETE',
        success: function(resp) {
                let myId = "#comment-" + resp.id
                $(myId).remove()
                }
            })
    }

    editComment(){
        this.setActionURL()
        this.setContent()
        let myUpdate = this.updateComment.bind(this)
        document.getElementById("js-comment").innerHTML = this.content
        $("#commitEdit").click(function(event){
            event.preventDefault()
            myUpdate()
        })
        $('#editComment').on('hidden.bs.modal', function(){
            $('#commitEdit').off()
        })
    }

    changeComment(newContent){
        this.selector.getElementsByTagName("p").namedItem("commentContent").innerHTML = newContent
        $('#editComment').modal('hide')
    }

    updateComment(){
        let newContent = document.getElementById("js-comment").value
        let id = this.id.replace(/\D*/, "")
        let myComment = this.changeComment.bind(this, newContent)
        let newData = {
            id: id,
            content: newContent
        }
        $.ajax({
            url: this.actionURL,
            type: "PATCH",
            data: {comment: newData},
            success: myComment
        })
    }
}



function addCommentListener(){
    $("#new_comment").submit(function (event) {
        event.preventDefault()
        let commentObj = new Comment(this)
        commentObj.postComment()

        $(this).removeClass("disabled")

    })
}

function addDeleteListener(target){
    $(".js-delete").click(function (event) {
        event.preventDefault()
        let commentObj = new Comment(this.parentElement.parentElement.parentElement)
        commentObj.deleteComment()
    })
}

function addEditListener(){
    $(".js-edit").click(function (event) {
        event.preventDefault()
        let commentObj = new Comment(this.parentNode.parentNode)
        commentObj.editComment()
    })
}





$(function (){
    addCommentListener()
    addDeleteListener()
    addEditListener()
})